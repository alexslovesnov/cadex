#include<algorithm>
#include<iostream>
#include<numeric>
#include<random>
#include<vector>

using namespace std;

template <typename RandomIt>
void SwapValues(RandomIt first, RandomIt second){
    auto value = *first;
    *first = *second;
    *second = value;
}

template <typename RandomIt>
void MergeSorted(RandomIt range_begin, RandomIt range_middle, RandomIt range_end){
    RandomIt left, right;
    left = range_begin;
    while(left != range_middle){
        right = range_middle;
        if(*left > *right){ 
            SwapValues(left, right);
            while(right < range_end - 1 && *right > *(right + 1)){
                SwapValues(right, right + 1);
                ++right;
            }
        }
        ++left;
    }
}

template <typename RandomIt>
void MergeSort(RandomIt range_begin, RandomIt range_end){
    int n = range_end - range_begin;
    if(n == 2 && *range_begin > *(range_end-1)){
        SwapValues(range_begin, range_begin + 1);
    }
    if(n > 2){
        RandomIt range_middle = range_begin + n/2;
        MergeSort(range_begin, range_middle);
        MergeSort(range_middle, range_end);
        MergeSorted(range_begin, range_middle, range_end);
    }
}

template <typename It>
void PrintRange(It range_begin, It range_end) {
    for (auto it = range_begin; it != range_end; ++it) {
        cout << *it << " "s;
    }
    cout << endl;
}

int main() {
    vector<int> test_vector(10);
    // iota             -> http://ru.cppreference.com/w/cpp/algorithm/iota
    // Заполняет диапазон последовательно возрастающими значениями
    iota(test_vector.begin(), test_vector.end(), 1);

    // shuffle   -> https://ru.cppreference.com/w/cpp/algorithm/random_shuffle
    // Перемешивает элементы в случайном порядке
    random_device rd;
    mt19937 g(rd());
    shuffle(test_vector.begin(), test_vector.end(), g);
    
    // Выводим вектор до сортировки
    PrintRange(test_vector.begin(), test_vector.end());
    // Сортируем вектор с помощью сортировки слиянием
    MergeSort(test_vector.begin(), test_vector.end());
    // Выводим результат
    PrintRange(test_vector.begin(), test_vector.end());
    return 0;
} 
